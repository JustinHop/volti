#!/usr/bin/env python

# -*- coding: utf-8 -*-

# Author: Milan Nikolic <gen2brain@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
from optparse import OptionParser

try:
    import dbus
    from dbus.mainloop.glib import DBusGMainLoop
except ImportError:
    sys.stderr.write("This program needs dbus-python\nExiting\n")
    sys.exit(1)

try:
    if os.path.isdir(os.path.join(".","src")) and os.path.isfile(os.path.join(".","setup.py")):
        from src import main
    else:
        from volti import main
except ImportError:
    sys.stderr.write("Can't import volti main module\nExiting\n")
    sys.exit(1)

if __name__ == "__main__":
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage, version=main.config.app_version)
    parser.add_option("-u", "--volume-up", action="store_true", dest="up", default=False, help="Increase volume")
    parser.add_option("-d", "--volume-down", action="store_true", dest="down", default=False, help="Decrease volume")
    parser.add_option("-m", "--mute", action="store_true", dest="mute", default=False, help="Mute volume")
    options, args = parser.parse_args()

    dbus.set_default_main_loop(DBusGMainLoop())
    bus = dbus.SessionBus()
    if bus.request_name("com.google.code.Volti") != dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
        obj = bus.get_object('com.google.code.Volti', '/com/google/code/Volti')
        iface = dbus.Interface(obj, 'com.google.code.Volti')
        if options.up:
            iface.emit("volume-up")
        elif options.down:
            iface.emit("volume-down")
        elif options.mute:
            iface.emit("mute")
        else:
            sys.stderr.write("Only one instance is allowed\n")
            sys.exit(1)
    else:
        volti = main.VolumeTray()
        volti.main()
